# this scripts inputs are hardcoded, they are the number of core genes with hits when blasted against essential genes, for each species, and for allspecies, these were obtained from recap files of Blast runs, that were generated by blast_recap_geenrator.py
# this scripts output is a stacked bar chart of core and essential genes (CEGs)

import matplotlib.pyplot as plt
import numpy as np

# Data
species = [
    "S. pneumoniae", "S. suis", "S. agalactiae",
    "S. equi sbsp. equi", "S. iniae", "S. uberis", "All species"
]

core_hits = np.array([370, 308, 160, 398, 419, 324, 62])
core_no_hits = np.array([1090, 971, 1396, 1383, 1142, 1098, 660])
total_core = np.array([1462, 1279, 1556, 1786, 1561, 1423, 719])
total_essential = np.array([536, 342, 160, 401, 476, 384, 62])

x = np.arange(len(species))
width = 0.35

fig, ax = plt.subplots(figsize=(14, 7))

# Plot stacked bar for core genes partitioned by essentiality
bars_core_hits = ax.bar(x - width/2, core_hits, width,
                        label='Core genes with essential hits',
                        color="#532C6B")  # Purple bottom

bars_core_no_hits = ax.bar(x - width/2, core_no_hits, width,
                           bottom=core_hits,
                           label='Core genes with no essential hits',
                           color="#7F7F7F")  # Grey top

# Plot total essential genes (red) side-by-side
bars_essential = ax.bar(x + width/2, total_essential, width,
                        label='Total essential genes',
                        color="#D33F6A")  # Red

# Annotate within purple bar: core_hits
for idx, bar in enumerate(bars_core_hits):
    height = bar.get_height()
    if height > 0:
        ax.annotate(f'{int(core_hits[idx])}',
                    xy=(bar.get_x() + bar.get_width() / 2, bar.get_y() + height * 0.5),
                    ha='center', va='center', fontsize=9, color='white', fontweight='bold')

# Annotate within grey bar: core_no_hits
for idx, bar in enumerate(bars_core_no_hits):
    height = bar.get_height()
    if height > 0:
        ax.annotate(f'{int(core_no_hits[idx])}',
                    xy=(bar.get_x() + bar.get_width() / 2, bar.get_y() + bar.get_height() - height * 0.5),
                    ha='center', va='center', fontsize=9, color='white', fontweight='bold')

# Annotate above stacked bar: total_core
for idx, bar in enumerate(bars_core_no_hits):
    total = total_core[idx]
    ax.annotate(f'Total: {int(total)}',
                xy=(bar.get_x() + bar.get_width() / 2, bar.get_y() + bar.get_height() + 8),
                ha='center', va='bottom', fontsize=9, fontweight='bold')

# Annotate total essential genes bar
for idx, bar in enumerate(bars_essential):
    height = bar.get_height()
    if height > 0:
        ax.annotate(f'{int(height)}',
                    xy=(bar.get_x() + bar.get_width() / 2, bar.get_y() + height + 8),
                    ha='center', va='bottom', fontsize=9)

# Labels and formatting
ax.set_ylabel('Number of Genes')
ax.set_xlabel('Species')
ax.set_title('Partitioning of Core Genes by Essentiality Across Streptococcus Species')
ax.set_xticks(x)
ax.set_xticklabels(species, rotation=15)
ax.legend(loc='upper left', bbox_to_anchor=(1.02, 1))

plt.tight_layout()

# Save high-resolution figures
plt.savefig("streptococcus_core_partitioned_annotated_FINAL.png", dpi=600)
plt.savefig("streptococcus_core_partitioned_annotated_FINAL.svg")

plt.show()
